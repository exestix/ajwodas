local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Fuzki-UI-Library/main/FuzkiLibrary.lua"))()
local Main = Library:Create("DreadzHub", "Assassin")
local Preview = Main:CreateSection("Farming")
local Tab2 = Main:CreateSection("Knife")
local Tab3 = Main:CreateSection("Misc")
Tab2:CreateLabel("HBE:")
Tab3:CreateLabel("Misc:")

Preview:CreateLabel("Farming:")
Preview:CreateToggle("Farm Kills", function(n)
        getgenv().Autofarm = n
        while getgenv().Autofarm == true do
game.Players.LocalPlayer.Character["Left Arm"].Transparency = 1
game.Players.LocalPlayer.Character["Right Arm"].Transparency = 1
game.Players.LocalPlayer.Character["Left Leg"].Transparency = 1
game.Players.LocalPlayer.Character["Right Leg"].Transparency = 1
        game.Players.LocalPlayer.Character["Torso"].Transparency = 1
                game.Players.LocalPlayer.Character["Head"].Transparency = 1
wait(0)
end
if getgenv().Autofarm == false then
        game.Players.LocalPlayer.Character["Left Arm"].Transparency = 0
game.Players.LocalPlayer.Character["Right Arm"].Transparency = 0
game.Players.LocalPlayer.Character["Left Leg"].Transparency = 0
game.Players.LocalPlayer.Character["Right Leg"].Transparency = 0
        game.Players.LocalPlayer.Character["Torso"].Transparency = 0
                game.Players.LocalPlayer.Character["Head"].Transparency = 0
        end
end)
if shared.n2autofarm then shared.n2autofarm:Disconnect();end;
local Players = game:GetService("Players");
local LocalPlayer = Players.LocalPlayer;
local Backpack = LocalPlayer.Backpack;
local LocalCharacter = LocalPlayer.Character;
local LocalRootPart;
local LocalHumanoid;

--local character
do
    local function characterAdded(Character)
        if typeof(Character) ~= "Instance" then return;end;
        LocalCharacter = Character;
        LocalRootPart = Character:WaitForChild("HumanoidRootPart");
        LocalHumanoid = Character:WaitForChild("Humanoid");
    end;
    characterAdded(LocalCharacter);
    LocalPlayer.CharacterAdded:Connect(characterAdded);
end;

local UI = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("ScreenGui"):WaitForChild("UI");
local TargetFrame = UI.Target;
local TargetVisible = TargetFrame.Visible;
local TargetText = TargetFrame.TargetText;
local Target = TargetVisible and Players:FindFirstChild(TargetText.Text);
local TargetCharacter;
local TargetRootPart;

TargetFrame.Changed:Connect(function()
    TargetVisible = TargetFrame.Visible;
end);
TargetText.Changed:Connect(function()
    Target = Players:FindFirstChild(TargetText.Text);
end);

local VotePad = workspace.Lobby.VoteStation.pad3.Position;
local function getClosestPlayer()
    local Closest;
    local MaxDistance;

    for I, Player in next, Players:GetPlayers() do
        if Player ~= LocalPlayer and LocalRootPart then
            local Character = workspace:FindFirstChild(Player.Name);
            local RootPart = Character and Character:FindFirstChild("HumanoidRootPart");
            local Humanoid = RootPart and Character:FindFirstChild("Humanoid");

            if Humanoid and Humanoid.Health > 0 then
                local Distance = (VotePad - RootPart.Position).Magnitude;
                if Distance > 300 then
                    Distance = (LocalRootPart.Position - RootPart.Position).Magnitude;
                    if Closest then
                        if Distance < MaxDistance then
                            Closest = Player;
                            MaxDistance = Distance;
                        end;
                    else
                        Closest = Player;
                        MaxDistance = Distance;
                    end;
                end;
            end;
        end;
    end;

    return Closest, MaxDistance;
end;
local ClosestPlayer;
local ClosestPlayerCharacter;
local ClosestPlayerRootPart;

local HitCheckCooldown = false;
local HitCheck = LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("localknifehandler"):WaitForChild("HitCheck");
local ThrowKnife = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ThrowKnife");

local ThrowCooldown = false;
local ThrowCFrame = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1);

local TPTweenInfo = TweenInfo.new(0, Enum.EasingStyle.Linear, Enum.EasingDirection.Out);
local TPOffset = CFrame.new(-2, -3.96, 1.6);

local TweenService = game:GetService("TweenService");
shared.n2autofarm = game:GetService("RunService").Heartbeat:Connect(function()
    ClosestPlayer = getClosestPlayer();
    ClosestPlayerCharacter = ClosestPlayer and workspace:FindFirstChild(ClosestPlayer.Name);
    ClosestPlayerRootPart = ClosestPlayerCharacter and ClosestPlayerCharacter:FindFirstChild("HumanoidRootPart");
    
    -- print(TargetVisible, Target, LocalCharacter, LocalRootPart, LocalHumanoid);
    if TargetVisible and Target and LocalCharacter and LocalRootPart and LocalHumanoid and getgenv().Autofarm == true then
        TargetCharacter = workspace:FindFirstChild(Target.Name);
        TargetRootPart = TargetCharacter and TargetCharacter:FindFirstChild("HumanoidRootPart");

    --Teleport
        workspace.Gravity = -2;
        LocalHumanoid:SetStateEnabled(15, false);
        TweenService:Create(
            LocalRootPart,
            TPTweenInfo,
            {CFrame = TargetRootPart.CFrame * TPOffset}
        ):Play();
    end;
end);

local Player = game.Players.LocalPlayer;

local cooldown = false

task.spawn(function()
    game:GetService("RunService").Stepped:connect(function()
        if Player.Character and not cooldown and game.Players.LocalPlayer.PlayerGui.ScreenGui.UI.Target.Visible == true and getgenv().Autofarm == true then
            if Player:DistanceFromCharacter(game.Workspace[game.Players.LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text].Head.Position) <= 6.5 then
                Player.PlayerScripts.localknifehandler.HitCheck:Fire(game.Workspace[game.Players.LocalPlayer.PlayerGui.ScreenGui.UI.Target.TargetText.Text])
                coroutine.wrap(function()
                    cooldown = true
                    task.wait(0.8)
                    cooldown = false
                end)()
            else
                task.wait()
            end
        end
    end)
end)
_G.Size = Vector3.new(20,20,20)
Tab2:CreateToggle("Hitbox Expander", function(ni)
if ni == false then
_G.Size = Vector3.new(2,2,2)
end
if ni == true then
_G.Size = Vector3.new(20,20,20)
end
--Main
local mt = getrawmetatable(game);

make_writeable(mt);

local old_index = mt.__index;



mt.__index = function(a, b)

if tostring(a) == "HumanoidRootPart" then

if tostring(b) == "Size" then

return Vector3.new(2, 2, 1);

end

end

return old_index(a, b);

end
wait(1)
print("executed")
	    getgenv().OFFON = ni

	    getgenv().ReSizeXCV = 20

	    getgenv().TransparencyXCV = 0.7

	    getgenv().ColourXCV = Color3.fromRGB(163, 162, 165)
	    spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()

            while _G.autofarmtoggle == true do

                spritzTween(game.Workspace[game.Players.LocalPlayer.PlayerGui.ScreenGui:WaitForChild("UI"):WaitForChild("Target"):WaitForChild("TargetText").Text].HumanoidRootPart,30)

                game.workspace.Gravity = 0

                wait(0.1)

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()      

            while _G.autofarmtoggle == true do

                wait(0.8)

                mouse1click()

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()

            while _G.autofarmtoggle == false do

                if _G.autofarmtoggle == false then

                    game.workspace.Gravity = 196.2

                end

                wait(10)

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()

            if _G.Toggle2 then

                for i, v in pairs(game:GetService("Workspace").KnifeHost.PowerUps:GetDescendants()) do

                    if v:IsA("Part") then

                        v.Archivable = false

                    end

                end

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()

            if _G.Toggle2 then

                for i, v in pairs(game:GetService("Workspace").KnifeHost:GetDescendants()) do

                    if v:IsA("Part") then

                        if v.Archivable == true then

                            local PlayerPosition = ClosestPlayerToCursor().baseHitbox.CFrame

                            v.CFrame = PlayerPosition

                        end

                    end

                end

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        char = game.Players.LocalPlayer.Character 

        while noclip do 

            for _,v in pairs(char:children()) do 

                pcall(function() if v.className == "Part" then v.CanCollide = false elseif v.ClassName == "Model" then

                v.Head.CanCollide = false end end) 

            end 

            game:service("RunService").Stepped:wait() 

        end

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        game:GetService("UserInputService").JumpRequest:Connect(function()

            if Infjump then

                game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

for i,v in pairs(game:GetService('Players'):GetPlayers()) do

    if v.Name ~= game.Players.LocalPlayer.Name then

game.Workspace[v.Name].HumanoidRootPart.Size = _G.Size

game.Workspace[v.Name].HumanoidRootPart.Transparency = .5

game.Workspace[v.Name].HumanoidRootPart.Color = Color3.new(171,0,255)

game.Workspace[v.Name].HumanoidRootPart.Material = "Neon"

game.Workspace[v.Name].HumanoidRootPart.CanCollide = false

wait()

end

end

end)

end)
end)

Tab2:CreateSlider(20, 50, "Hitbox Epander Size", function(val)
_G.Size = Vector3.new(val,val,val)
end)
Tab2:CreateLabel("Silent Aim:")
_G.Size2 = Vector3.new(75,75,75)
Tab2:CreateToggle("Silent Aim", function(Value)
print("HAHAHAHAH")
if Value == true then
local mt = getrawmetatable(game);

make_writeable(mt);

local old_index = mt.__index;



mt.__index = function(a, b)

if tostring(a) == "HumanoidRootPart" then

if tostring(b) == "Size" then

return Vector3.new(2, 2, 1);

end

end

return old_index(a, b);

end
wait(1)
print("executed")
	    getgenv().OFFON = ni

	    getgenv().ReSizeXCV = 20

	    getgenv().TransparencyXCV = 0.7

	    getgenv().ColourXCV = Color3.fromRGB(163, 162, 165)
	    spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()

            while _G.autofarmtoggle == true do

                spritzTween(game.Workspace[game.Players.LocalPlayer.PlayerGui.ScreenGui:WaitForChild("UI"):WaitForChild("Target"):WaitForChild("TargetText").Text].HumanoidRootPart,30)

                game.workspace.Gravity = 0

                wait(0.1)

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()      

            while _G.autofarmtoggle == true do

                wait(0.8)

                mouse1click()

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()

            while _G.autofarmtoggle == false do

                if _G.autofarmtoggle == false then

                    game.workspace.Gravity = 196.2

                end

                wait(10)

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()

            if _G.Toggle2 then

                for i, v in pairs(game:GetService("Workspace").KnifeHost.PowerUps:GetDescendants()) do

                    if v:IsA("Part") then

                        v.Archivable = false

                    end

                end

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()

            if _G.Toggle2 then

                for i, v in pairs(game:GetService("Workspace").KnifeHost:GetDescendants()) do

                    if v:IsA("Part") then

                        if v.Archivable == true then

                            local PlayerPosition = ClosestPlayerToCursor().baseHitbox.CFrame

                            v.CFrame = PlayerPosition

                        end

                    end

                end

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        char = game.Players.LocalPlayer.Character 

        while noclip do 

            for _,v in pairs(char:children()) do 

                pcall(function() if v.className == "Part" then v.CanCollide = false elseif v.ClassName == "Model" then

                v.Head.CanCollide = false end end) 

            end 

            game:service("RunService").Stepped:wait() 

        end

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        game:GetService("UserInputService").JumpRequest:Connect(function()

            if Infjump then

                game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

for i,v in pairs(game:GetService('Players'):GetPlayers()) do

    if v.Name ~= game.Players.LocalPlayer.Name then

game.Workspace[v.Name].HumanoidRootPart.Size = _G.Size2

game.Workspace[v.Name].HumanoidRootPart.Transparency = 1

game.Workspace[v.Name].HumanoidRootPart.Color = Color3.new(171,0,255)

game.Workspace[v.Name].HumanoidRootPart.Material = "Neon"

game.Workspace[v.Name].HumanoidRootPart.CanCollide = false

wait()

end

end

end)

end)
else
_G.Size2 = Vector3.new(2,2,2)
local mt = getrawmetatable(game);

make_writeable(mt);

local old_index = mt.__index;



mt.__index = function(a, b)

if tostring(a) == "HumanoidRootPart" then

if tostring(b) == "Size" then

return Vector3.new(2, 2, 1);

end

end

return old_index(a, b);

end
wait(1)
print("executed")
	    getgenv().OFFON = ni

	    getgenv().ReSizeXCV = 20

	    getgenv().TransparencyXCV = 0.7

	    getgenv().ColourXCV = Color3.fromRGB(163, 162, 165)
	    spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()

            while _G.autofarmtoggle == true do

                spritzTween(game.Workspace[game.Players.LocalPlayer.PlayerGui.ScreenGui:WaitForChild("UI"):WaitForChild("Target"):WaitForChild("TargetText").Text].HumanoidRootPart,30)

                game.workspace.Gravity = 0

                wait(0.1)

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()      

            while _G.autofarmtoggle == true do

                wait(0.8)

                mouse1click()

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()

            while _G.autofarmtoggle == false do

                if _G.autofarmtoggle == false then

                    game.workspace.Gravity = 196.2

                end

                wait(10)

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()

            if _G.Toggle2 then

                for i, v in pairs(game:GetService("Workspace").KnifeHost.PowerUps:GetDescendants()) do

                    if v:IsA("Part") then

                        v.Archivable = false

                    end

                end

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        pcall(function()

            if _G.Toggle2 then

                for i, v in pairs(game:GetService("Workspace").KnifeHost:GetDescendants()) do

                    if v:IsA("Part") then

                        if v.Archivable == true then

                            local PlayerPosition = ClosestPlayerToCursor().baseHitbox.CFrame

                            v.CFrame = PlayerPosition

                        end

                    end

                end

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        char = game.Players.LocalPlayer.Character 

        while noclip do 

            for _,v in pairs(char:children()) do 

                pcall(function() if v.className == "Part" then v.CanCollide = false elseif v.ClassName == "Model" then

                v.Head.CanCollide = false end end) 

            end 

            game:service("RunService").Stepped:wait() 

        end

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

        game:GetService("UserInputService").JumpRequest:Connect(function()

            if Infjump then

                game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")

            end

        end)

    end)

end)



spawn(function()

    game:GetService('RunService').RenderStepped:connect(function()

for i,v in pairs(game:GetService('Players'):GetPlayers()) do

    if v.Name ~= game.Players.LocalPlayer.Name then

game.Workspace[v.Name].HumanoidRootPart.Size = _G.Size2

game.Workspace[v.Name].HumanoidRootPart.Transparency = 1

game.Workspace[v.Name].HumanoidRootPart.Color = Color3.new(171,0,255)

game.Workspace[v.Name].HumanoidRootPart.Material = "Neon"

game.Workspace[v.Name].HumanoidRootPart.CanCollide = false

wait()

end

end

end)

end)
end
end)
Tab3:CreateButton("FOV", "FOV Circle", function()

local Camera = game:GetService("Workspace").CurrentCamera;

local Mouse = game:GetService("Players").LocalPlayer:GetMouse();

local Players = game:GetService("Players");

local Player = Players.LocalPlayer;

local CoreGui = game.CoreGui

local ContentProvider = game.ContentProvider

local RobloxGuis = {"RobloxGui", "TeleportGui", "RobloxPromptGui", "RobloxLoadingGui", "PlayerList", "RobloxNetworkPauseNotification", "PurchasePrompt", "HeadsetDisconnectedDialog", "ThemeProvider", "DevConsoleMaster"}

getgenv().noclip = false 

FOV_Circle = Drawing.new("Circle");

FOV_Circle.Color = Color3.fromRGB(255,255,255);

FOV_Circle.Thickness = 1.5;

FOV_Circle.NumSides = 100000000;

FOV_Circle.Radius = 150;

FOV_Circle.Visible = false;

FOV_Circle.Filled = false;



FOV_Circle2 = Drawing.new("Circle");

FOV_Circle2.Color = Color3.fromRGB(255,255,255);

FOV_Circle2.Thickness = 1.5;

FOV_Circle2.NumSides = 13;

FOV_Circle2.Radius = 150;

FOV_Circle2.Visible = false;

FOV_Circle2.Filled = false;



game:GetService('RunService').Stepped:connect(function()

    FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)

end)



game:GetService('RunService').Stepped:connect(function()

    FOV_Circle2.Position = Vector2.new(Mouse.X, Mouse.Y + 37)

end)

wait(.1)
        FOV_Circle.Visible = true
end)
Tab3:CreateButton("Click Me!", "ESP", function()
local function API_Check()
    if Drawing == nil then
        return "No"
    else
        return "Yes"
    end
end

local Find_Required = API_Check()

if Find_Required == "No" then
    game:GetService("StarterGui"):SetCore("SendNotification",{
        Title = "Exunys Developer";
        Text = "ESP script could not be loaded because your exploit is unsupported.";
        Duration = math.huge;
        Button1 = "OK"
    })

    return
end

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera

local Typing = false

_G.SendNotifications = true   -- If set to true then the script would notify you frequently on any changes applied and when loaded / errored. (If a game can detect this, it is recommended to set it to false)
_G.DefaultSettings = false   -- If set to true then the ESP script would run with default settings regardless of any changes you made.

_G.TeamCheck = false   -- If set to true then the script would create ESP only for the enemy team members.

_G.ESPVisible = true   -- If set to true then the ESP will be visible and vice versa.
_G.TextColor = Color3.fromRGB(255, 80, 10)   -- The color that the boxes would appear as.
_G.TextSize = 14   -- The size of the text.
_G.Center = true   -- If set to true then the script would be located at the center of the label.
_G.Outline = true   -- If set to true then the text would have an outline.
_G.OutlineColor = Color3.fromRGB(0, 0, 0)   -- The outline color of the text.
_G.TextTransparency = 0.7   -- The transparency of the text.
_G.TextFont = Drawing.Fonts.UI   -- The font of the text. (UI, System, Plex, Monospace) 

_G.DisableKey = Enum.KeyCode.Q   -- The key that disables / enables the ESP.

local function CreateESP()
    for _, v in next, Players:GetPlayers() do
        if v.Name ~= Players.LocalPlayer.Name then
            local ESP = Drawing.new("Text")

            RunService.RenderStepped:Connect(function()
                if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                    local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[v.Name]:WaitForChild("Head", math.huge).Position)

                    ESP.Size = _G.TextSize
                    ESP.Center = _G.Center
                    ESP.Outline = _G.Outline
                    ESP.OutlineColor = _G.OutlineColor
                    ESP.Color = _G.TextColor
                    ESP.Transparency = _G.TextTransparency
                    ESP.Font = _G.TextFont

                    if OnScreen == true then
                        local Part1 = workspace:WaitForChild(v.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position
                        local Part2 = workspace:WaitForChild(Players.LocalPlayer.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position or 0
                        local Dist = (Part1 - Part2).Magnitude
                        ESP.Position = Vector2.new(Vector.X, Vector.Y - 25)
                        ESP.Text = ("("..tostring(math.floor(tonumber(Dist)))..") "..v.Name.." ["..workspace[v.Name].Humanoid.Health.."]")
                        if _G.TeamCheck == true then 
                            if Players.LocalPlayer.Team ~= v.Team then
                                ESP.Visible = _G.ESPVisible
                            else
                                ESP.Visible = false
                            end
                        else
                            ESP.Visible = _G.ESPVisible
                        end
                    else
                        ESP.Visible = false
                    end
                else
                    ESP.Visible = false
                end
            end)

            Players.PlayerRemoving:Connect(function()
                ESP.Visible = false
            end)
        end
    end

    Players.PlayerAdded:Connect(function(Player)
        Player.CharacterAdded:Connect(function(v)
            if v.Name ~= Players.LocalPlayer.Name then 
                local ESP = Drawing.new("Text")
    
                RunService.RenderStepped:Connect(function()
                    if workspace:FindFirstChild(v.Name) ~= nil and workspace[v.Name]:FindFirstChild("HumanoidRootPart") ~= nil then
                        local Vector, OnScreen = Camera:WorldToViewportPoint(workspace[v.Name]:WaitForChild("Head", math.huge).Position)
    
                        ESP.Size = _G.TextSize
                        ESP.Center = _G.Center
                        ESP.Outline = _G.Outline
                        ESP.OutlineColor = _G.OutlineColor
                        ESP.Color = _G.TextColor
                        ESP.Transparency = _G.TextTransparency
    
                        if OnScreen == true then
                            local Part1 = workspace:WaitForChild(v.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position
                        local Part2 = workspace:WaitForChild(Players.LocalPlayer.Name, math.huge):WaitForChild("HumanoidRootPart", math.huge).Position or 0
                            local Dist = (Part1 - Part2).Magnitude
                            ESP.Position = Vector2.new(Vector.X, Vector.Y - 25)
                            ESP.Text = ("("..tostring(math.floor(tonumber(Dist)))..") "..v.Name.." ["..workspace[v.Name].Humanoid.Health.."]")
                            if _G.TeamCheck == true then 
                                if Players.LocalPlayer.Team ~= Player.Team then
                                    ESP.Visible = _G.ESPVisible
                                else
                                    ESP.Visible = false
                                end
                            else
                                ESP.Visible = _G.ESPVisible
                            end
                        else
                            ESP.Visible = false
                        end
                    else
                        ESP.Visible = false
                    end
                end)
    
                Players.PlayerRemoving:Connect(function()
                    ESP.Visible = false
                end)
            end
        end)
    end)
end

if _G.DefaultSettings == true then
    _G.TeamCheck = false
    _G.ESPVisible = true
    _G.TextColor = Color3.fromRGB(40, 90, 255)
    _G.TextSize = 25
    _G.Center = true
    _G.Outline = false
    _G.OutlineColor = Color3.fromRGB(0, 0, 0)
    _G.DisableKey = Enum.KeyCode.Q
    _G.TextTransparency = 0.75
end

UserInputService.TextBoxFocused:Connect(function()
    Typing = true
end)

UserInputService.TextBoxFocusReleased:Connect(function()
    Typing = false
end)

UserInputService.InputBegan:Connect(function(Input)
    if Input.KeyCode == _G.DisableKey and Typing == false then
        _G.ESPVisible = not _G.ESPVisible
        
        if _G.SendNotifications == true then
            game:GetService("StarterGui"):SetCore("SendNotification",{
                Title = "Exunys Developer";
                Text = "The ESP's visibility is now set to "..tostring(_G.ESPVisible)..".";
                Duration = 5;
            })
        end
    end
end)

local Success, Errored = pcall(function()
    CreateESP()
end)


end)
Tab3:CreateToggle("Auto-Equip Knife", function(N)
getgenv().L = N
while getgenv().L == true do
if game.Players.LocalPlayer.Backpack:FindFirstChild("Knife") and getgenv().L == true then
game.Players.LocalPlayer.Character.Humanoid:EquipTool(Game.Players.LocalPlayer.Backpack.Knife)
end
wait(0)
end
end)
Tab3:CreateButton("Click Me!", "Speed (TOGGLE IS Z)", function()
        repeat
            wait()
        until game:IsLoaded()
        local L_134_ = game:service('Players')
        local L_135_ = L_134_.LocalPlayer
        repeat
            wait()
        until L_135_.Character
        local L_136_ = game:service('UserInputService')
        local L_137_ = game:service('RunService')
        getgenv().Multiplier = 0.5
        local L_138_ = true
        local L_139_
        L_136_.InputBegan:connect(function(L_140_arg0)
            if L_140_arg0.KeyCode == Enum.KeyCode.LeftBracket then
                Multiplier = Multiplier + 0.01
                print(Multiplier)
                wait(0.2)
                while L_136_:IsKeyDown(Enum.KeyCode.LeftBracket) do
                    wait()
                    Multiplier = Multiplier + 0.01
                    print(Multiplier)
                end
            end
            if L_140_arg0.KeyCode == Enum.KeyCode.RightBracket then
                Multiplier = Multiplier - 0.01
                print(Multiplier)
                wait(0.2)
                while L_136_:IsKeyDown(Enum.KeyCode.RightBracket) do
                    wait()
                    Multiplier = Multiplier - 0.01
                    print(Multiplier)
                end
            end
            if L_140_arg0.KeyCode == Enum.KeyCode.Z then
                L_138_ = not L_138_
                if L_138_ == true then
                    repeat
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.Humanoid.MoveDirection * Multiplier
                        game:GetService("RunService").Stepped:wait()
                    until L_138_ == false
                end
            end
            end)
end)